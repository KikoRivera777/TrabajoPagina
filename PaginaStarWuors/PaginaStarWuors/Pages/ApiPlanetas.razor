@page "/Planetas"

@using System.Net.Http;
@using System.Text.Json;
@using System.Collections.Generic;
@using System.Linq;
@inject HttpClient httpClient

<style>
    .planets {
        margin-top: 50px;
        margin-left: 10px;
        text-align: center;
        border: 5px solid white;
        padding: 10px;
    }

    .container {
        display: grid;
        grid-template-columns: auto auto;
    }

    .botones {
        display: flex;
        justify-content: center;
    }

    .boton {
        margin: 0 5px;
    }
</style>

<h2>Planets</h2>
<div class="botones">
    <div class="buscador">
        <input type="text" class="buscar" @bind="searchstring" @bind:event="oninput" />
    </div>
    <button class="boton"><a href="Planetas">1</a></button>
    <button class="boton"><a href="Planetas2">2</a></button>
    <button class="boton"><a href="Planetas3">3</a></button>
    <button class="boton"><a href="Planetas4">4</a></button>
    <button class="boton"><a href="Planetas5">5</a></button>
    <button class="boton"><a href="Planetas6">6</a></button>
    <button class="boton" @onclick="MostrarDefaultPlanets">Default</button>
    <button class="boton" @onclick="MostrarAscPlanets">Ascendent</button>
    <button class="boton" @onclick="MostrarDescPlanets">Descendent</button>
</div>

<div>
    @if (mostrarDefaultPlanets)
    {
        <div class="container">
            @foreach (var planet in searchPlanets)
            {
            <div class="planets">
                @{
                    var imageUrl = $"https://starwars-visualguide.com/assets/img/planets/{planets.IndexOf(planet) + 1}.jpg";
                    var errorImageUrl = "https://www.rosemacsales.com/assets/images/no_image.png";
                }
                <img src="@imageUrl" onerror="this.src='@errorImageUrl'" />
                    <h3><a href="Planeta/@(planets.IndexOf(planet) + 1)" @onclick="() => PlanetsIndex = planets.IndexOf(planet) + 1">Name: @(string.IsNullOrEmpty(planet.name) ? "No information avalible" : planet.name)</a></h3>
                    
            </div>
            }
        </div>
    }
    else if (mostrarAscPlanets)
    {
        <div class="container">
            @foreach (var planet in AscPlanets)
            {
                <div class="planets">
                    @{
                        var imageUrl = $"https://starwars-visualguide.com/assets/img/planets/{planets.IndexOf(planet) + 1}.jpg";
                        var errorImageUrl = "https://www.rosemacsales.com/assets/images/no_image.png";
                    }
                    <img src="@imageUrl" onerror="this.src='@errorImageUrl'" />
                    <h3><a href="Planeta/@(planets.IndexOf(planet) + 1)" @onclick="() => PlanetsIndex = planets.IndexOf(planet) + 1">Name: @(string.IsNullOrEmpty(planet.name) ? "No information avalible" : planet.name)</a></h3>

                </div>
            }
        </div>
    }
    else if (mostrarDescPlanets)
    {
        <div class="container">
            @foreach (var planet in DescPlanets)
            {
                <div class="planets">
                    @{
                        var imageUrl = $"https://starwars-visualguide.com/assets/img/planets/{planets.IndexOf(planet) + 1}.jpg";
                        var errorImageUrl = "https://www.rosemacsales.com/assets/images/no_image.png";
                    }
                    <img src="@imageUrl" onerror="this.src='@errorImageUrl'" />
                    <h3><a href="Planeta/@(planets.IndexOf(planet) + 1)" @onclick="() => PlanetsIndex = planets.IndexOf(planet) + 1">Name: @(string.IsNullOrEmpty(planet.name) ? "No information avalible" : planet.name)</a></h3>

                </div>
            }
        </div>
    }
    else
    {
        <p>No se ha seleccionado ninguna opción de orden.</p>
    }
</div>

@code {
    string searchstring = string.Empty;
    HttpRequestMessage requestMessage;
    HttpResponseMessage responseMessage;
    List<Planets> searchPlanets => planets.Where(x => x.name.ToUpper().Contains(searchstring.ToUpper())).ToList();
    List<Planets> planets;
    List<Planets> AscPlanets;
    List<Planets> DescPlanets;
    int PlanetsIndex { get; set; }

    private bool mostrarDefaultPlanets = true;
    private bool mostrarAscPlanets = false;
    private bool mostrarDescPlanets = false;

    protected override async Task OnInitializedAsync()
    {
        planets = new List<Planets>();

        for (int i = 1; i <= 10; i++)
        {
            requestMessage = new HttpRequestMessage
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri($"https://swapi.dev/api/planets/{i}")
                };

            responseMessage = await httpClient.SendAsync(requestMessage);

            if (responseMessage.IsSuccessStatusCode)
            {
                var responseString = await responseMessage.Content.ReadAsStringAsync();
                var planet = JsonSerializer.Deserialize<Planets>(responseString);
                
                planets.Add(planet);
            }
        }
    }

    public class Planets
    {
        public string name { get; set; }
        public string Url { get; set; }
    }

    private void MostrarDefaultPlanets()
    {
        mostrarDefaultPlanets = true;
        mostrarAscPlanets = false;
        mostrarDescPlanets = false;
    }

    private void MostrarAscPlanets()
    {
        AscPlanets = planets.OrderBy(x => x.name).ToList();
        mostrarDefaultPlanets = false;
        mostrarAscPlanets = true;
        mostrarDescPlanets = false;
    }

    private void MostrarDescPlanets()
    {
        DescPlanets = planets.OrderByDescending(x => x.name).ToList();
        mostrarDefaultPlanets = false;
        mostrarAscPlanets = false;
        mostrarDescPlanets = true;
    }

}
