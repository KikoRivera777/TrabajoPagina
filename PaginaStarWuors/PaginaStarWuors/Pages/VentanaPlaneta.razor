@page "/Planeta"

@using System.Net.Http;
@using System.Text.Json;
@using System.Collections.Generic;
@inject HttpClient httpClient

<style>
    .planets {
        margin-top: 50px;
        margin-left: 10px;
        text-align: center;
        border: 5px solid white;
        padding: 10px;
    }

    .container {
        display: grid;
        grid-template-columns: auto auto;
    }
</style>

<h2>Planet description</h2>

<div>
    @if (planets != null)
    {
        <div class="container">
            @foreach (var planet in planets)
            {
                <div class="planets">
                    @{
                        var imageUrl = $"https://starwars-visualguide.com/assets/img/planets/{planets.IndexOf(planet) + 1}.jpg";
                        var errorImageUrl = "https://www.rosemacsales.com/assets/images/no_image.png";
                    }
                    <img src="@imageUrl" onerror="this.src='@errorImageUrl'" />
                    <h3>Name: @(string.IsNullOrEmpty(planet.name) ? "No information avalible" : planet.name)</h3>
                    <h3>Rotation period: @(string.IsNullOrEmpty(planet.rotation_period) ? "No information avalible" : planet.rotation_period)</h3>
                    <h3>Orbital period: @(string.IsNullOrEmpty(planet.orbital_period) ? "No information avalible" : planet.orbital_period)</h3>
                    <h3>Diameter: @(string.IsNullOrEmpty(planet.diameter) ? "No information avalible" : planet.diameter)</h3>
                    <h3>Climate: @(string.IsNullOrEmpty(planet.climate) ? "No information avalible" : planet.climate)</h3>
                    <h3>Gravity: @(string.IsNullOrEmpty(planet.gravity) ? "No information avalible" : planet.gravity)</h3>
                    <h3>Terrain: @(string.IsNullOrEmpty(planet.terrain) ? "No information avalible" : planet.terrain)</h3>
                    <h3>Surface waters: @(string.IsNullOrEmpty(planet.surface_water) ? "No information avalible" : planet.surface_water)</h3>
                    <h3>Population: @(string.IsNullOrEmpty(planet.population) ? "No information avalible" : planet.population)</h3>
                    <h3>Residents:</h3>
                    <ul>
                        @if (planet.residentNames == null || planet.residentNames.Count == 0)
                        {
                            <li>No information available</li>
                        }
                        else
                        {
                            @foreach (var filmTitle in planet.residentNames)
                            {
                                <li>@filmTitle</li>
                            }
                        }
                    </ul>
                    <h3>Films:</h3>
                    <ul>
                        @if (planet.filmTitles == null || planet.filmTitles.Count == 0)
                        {
                            <li>No information available</li>
                        }
                        else
                        {
                            @foreach (var filmTitle in planet.filmTitles)
                            {
                                <li>@filmTitle</li>
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }
</div>

@code {
    string searchstring;
    HttpRequestMessage requestMessage;
    HttpResponseMessage responseMessage;
    List<Planets> planets;

    protected override async Task OnInitializedAsync()
    {
        planets = new List<Planets>();

        
            requestMessage = new HttpRequestMessage
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri($"https://swapi.dev/api/planets/1")
                };

            responseMessage = await httpClient.SendAsync(requestMessage);

            if (responseMessage.IsSuccessStatusCode)
            {
                var responseString = await responseMessage.Content.ReadAsStringAsync();
                var planet = JsonSerializer.Deserialize<Planets>(responseString);
                // Obtener los nombres de las películas
                planet.filmTitles = new List<string>();
                foreach (var filmUrl in planet.films)
                {
                    var filmResponse = await httpClient.GetAsync(filmUrl);
                    if (filmResponse.IsSuccessStatusCode)
                    {
                        var filmResponseString = await filmResponse.Content.ReadAsStringAsync();
                        var film = JsonSerializer.Deserialize<Film>(filmResponseString);
                        planet.filmTitles.Add(film.title);
                    }
                }

                // Obtener los nombres de los pilotos
                planet.residentNames = new List<string>();
                foreach (var residentUrl in planet.residents)
                {
                    var residentResponse = await httpClient.GetAsync(residentUrl);
                    if (residentResponse.IsSuccessStatusCode)
                    {
                        var residentResponseString = await residentResponse.Content.ReadAsStringAsync();
                        var resident = JsonSerializer.Deserialize<Resident>(residentResponseString);
                        planet.residentNames.Add(resident.name);
                    }
                }
                planets.Add(planet);
            }
        
    }

    public class Planets
    {
        public string name { get; set; }
        public string rotation_period { get; set; }
        public string orbital_period { get; set; }
        public string diameter { get; set; }
        public string climate { get; set; }
        public string gravity { get; set; }
        public string terrain { get; set; }
        public string surface_water { get; set; }
        public string population { get; set; }
        public List<string> residents { get; set; }
        public List<string> residentNames { get; set; }
        public List<string> films { get; set; }
        public List<string> filmTitles { get; set; }
    }

    public class Film
    {
        public string title { get; set; }
    }

    public class Resident
    {
        public string name { get; set; }
    }
}