@page "/Vehículo/{VehicleIndex:int}"

@using System.Net.Http;
@using System.Text.Json;
@using System.Collections.Generic;
@inject HttpClient httpClient

<style>
    .vehicles {
        margin-top: 50px;
        border: 5px solid white;
        margin-left: 10px;
        text-align: center;
        padding: 10px;
        box-shadow: 2px 3px 26px 0px white;
        color: white;
        border-radius: 10px;
    }

    img {
        box-shadow: 2px 3px 26px 0px white;
    }

    .container {
        display: grid;
        grid-template-columns: auto auto;
    }

    li{
        font-size: 20px;
        list-style: none;
    }
</style>

<div>
    @if (vehicles != null)
    {
        <div class="container">
            @foreach (var vehicle in vehicles)
            {
                <div class="vehicles">
                    @{
                        var imageUrl = $"https://starwars-visualguide.com/assets/img/vehicles/{VehicleIndex}.jpg";
                        var errorImageUrl = "https://www.rosemacsales.com/assets/images/no_image.png";
                    }
                    <img src="@imageUrl" onerror="this.src='@errorImageUrl'" />
                    <h3>Name: @(string.IsNullOrEmpty(vehicle.name) ? "No information avalible" : vehicle.name)</h3>
                    <h3>Model: @(string.IsNullOrEmpty(vehicle.model) ? "No information avalible" : vehicle.model)</h3>
                    <h3>Manufacturer: @(string.IsNullOrEmpty(vehicle.manufacturer) ? "No information avalible" : vehicle.manufacturer)</h3>
                    <h3>Cost in credits: @(string.IsNullOrEmpty(vehicle.cost_in_credits) ? "No information" : vehicle.cost_in_credits)</h3>
                    <h3>Length: @(string.IsNullOrEmpty(vehicle.length) ? "No information avalible" : vehicle.length)</h3>
                    <h3>Max atmosphering speed: @(string.IsNullOrEmpty(vehicle.max_atmosphering_speed) ? "No information avalible" : vehicle.max_atmosphering_speed)</h3>
                    <h3>Crew: @(string.IsNullOrEmpty(vehicle.crew) ? "No information avalible" : vehicle.crew)</h3>
                    <h3>Passengers: @(string.IsNullOrEmpty(vehicle.passengers) ? "No information avalible" : vehicle.passengers)</h3>
                    <h3>Cargo capacity: @(string.IsNullOrEmpty(vehicle.cargo_capacity) ? "No information avalible" : vehicle.cargo_capacity)</h3>
                    <h3>Consumables: @(string.IsNullOrEmpty(vehicle.consumables) ? "No information avalible" : vehicle.consumables)</h3>
                    <h3>Vehicle class: @(string.IsNullOrEmpty(vehicle.vehicle_class) ? "No information avalible" : vehicle.vehicle_class)</h3>
                    <h3>Films:</h3>
                    <ul>
                        @if (vehicle.filmTitles == null || vehicle.filmTitles.Count == 0)
                        {
                            <li>No information available</li>
                        }
                        else
                        {
                            @foreach (var filmTitle in vehicle.filmTitles)
                            {
                                <li>@filmTitle</li>
                            }
                        }
                    </ul>
                    <h3>Pilots</h3>
                    <ul>
                        @if (vehicle.pilotNames == null || vehicle.pilotNames.Count == 0)
                        {
                            <li>No information available</li>
                        }
                        else
                        {
                            @foreach (var pilotName in vehicle.pilotNames)
                            {
                                <li>@pilotName</li>
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }
</div>

@code {
    string searchstring;
    HttpRequestMessage requestMessage;
    HttpResponseMessage responseMessage;
    List<Vehicles> vehicles;
    [Parameter]
    public int VehicleIndex { get; set; }

    protected override async Task OnInitializedAsync()
    {
        vehicles = new List<Vehicles>();

            requestMessage = new HttpRequestMessage
                {
                    Method = HttpMethod.Get,
                RequestUri = new Uri($"https://swapi.dev/api/vehicles/{VehicleIndex}")
                };

            responseMessage = await httpClient.SendAsync(requestMessage);

            if (responseMessage.IsSuccessStatusCode)
            {
                var responseString = await responseMessage.Content.ReadAsStringAsync();
                var vehicle = JsonSerializer.Deserialize<Vehicles>(responseString);

                vehicle.filmTitles = new List<string>();
                foreach (var filmUrl in vehicle.films)
                {
                    var filmResponse = await httpClient.GetAsync(filmUrl);
                    if (filmResponse.IsSuccessStatusCode)
                    {
                        var filmResponseString = await filmResponse.Content.ReadAsStringAsync();
                        var film = JsonSerializer.Deserialize<Film>(filmResponseString);
                        vehicle.filmTitles.Add(film.title);
                    }
                }

                // Obtener los nombres de los pilotos
                vehicle.pilotNames = new List<string>();
                foreach (var pilotUrl in vehicle.pilots)
                {
                    var pilotResponse = await httpClient.GetAsync(pilotUrl);
                    if (pilotResponse.IsSuccessStatusCode)
                    {
                        var pilotResponseString = await pilotResponse.Content.ReadAsStringAsync();
                        var pilot = JsonSerializer.Deserialize<Pilot>(pilotResponseString);
                        vehicle.pilotNames.Add(pilot.name);
                    }
                }

                vehicles.Add(vehicle);
            }
    }

    public class Vehicles
    {
        public string name { get; set; }
        public string model { get; set; }
        public string manufacturer { get; set; }
        public string cost_in_credits { get; set; }
        public string length { get; set; }
        public string max_atmosphering_speed { get; set; }
        public string crew { get; set; }
        public string passengers { get; set; }
        public string cargo_capacity { get; set; }
        public string consumables { get; set; }
        public string vehicle_class { get; set; }
        public List<string> films { get; set; }
        public List<string> filmTitles { get; set; }
        public List<string> pilots { get; set; }
        public List<string> pilotNames { get; set; }
    }

    public class Film
    {
        public string title { get; set; }
    }

    public class Pilot
    {
        public string name { get; set; }
    }
}