@page "/Nave"

@using System.Net.Http;
@using System.Text.Json;
@using System.Collections.Generic;
@inject HttpClient httpClient

<style>
    .starships {
        margin-top: 50px;
        border: 5px solid white;
        margin-left: 10px;
        text-align: center;
        padding: 10px;
    }

    .container {
        display: grid;
        grid-template-columns: auto auto;
    }
</style>

<h2>Starship description</h2>

<div>
    @if (starships != null)
    {
        <div class="container">
            @foreach (var starship in starships)
            {
                <div class="starships">
                    @{
                        var imageUrl = $"https://starwars-visualguide.com/assets/img/starships/{starships.IndexOf(starship) + 1}.jpg";
                        var errorImageUrl = "https://www.rosemacsales.com/assets/images/no_image.png";
                    }
                    <img src="@imageUrl" onerror="this.src='@errorImageUrl'" />
                    <h3>Name: @(string.IsNullOrEmpty(starship.name) ? "No information avalible" : starship.name)</h3>
                    <h3>Model: @(string.IsNullOrEmpty(starship.model) ? "No information avalible" : starship.model)</h3>
                    <h3>Manufacturer: @(string.IsNullOrEmpty(starship.manufacturer) ? "No information avalible" : starship.manufacturer)</h3>
                    <h3>Cost in credits: @(string.IsNullOrEmpty(starship.cost_in_credits) ? "No information" : starship.cost_in_credits)</h3>
                    <h3>Length: @(string.IsNullOrEmpty(starship.length) ? "No information avalible" : starship.length)</h3>
                    <h3>Max Atmosphering Speed: @(string.IsNullOrEmpty(starship.max_atmosphering_speed) ? "No information avalible" : starship.max_atmosphering_speed)</h3>
                    <h3>Crew: @(string.IsNullOrEmpty(starship.crew) ? "No information avalible" : starship.crew)</h3>
                    <h3>Passengers: @(string.IsNullOrEmpty(starship.passengers) ? "No information avalible" : starship.passengers)</h3>
                    <h3>Cargo Capacity: @(string.IsNullOrEmpty(starship.cargo_capacity) ? "No information avalible" : starship.cargo_capacity)</h3>
                    <h3>Consumables: @(string.IsNullOrEmpty(starship.consumables) ? "No information avalible" : starship.consumables)</h3>
                    <h3>Hyperdrive Rating: @(string.IsNullOrEmpty(starship.hyperdrive_rating) ? "No information avalible" : starship.hyperdrive_rating)</h3>
                    <h3>MGLT: @(string.IsNullOrEmpty(starship.MGLT) ? "No information avalible" : starship.MGLT)</h3>
                    <h3>Starship Class: @(string.IsNullOrEmpty(starship.starship_class) ? "No information avalible" : starship.starship_class)</h3>
                    <h3>Pilots:</h3>
                    <ul>
                        @if (starship.pilotNames == null || starship.pilotNames.Count == 0)
                        {
                            <li>No information available</li>
                        }
                        else
                        {
                            @foreach (var filmTitle in starship.pilotNames)
                            {
                                <li>@filmTitle</li>
                            }
                        }
                    </ul>
                    <h3>Films:</h3>
                    <ul>
                        @if (starship.filmTitles == null || starship.filmTitles.Count == 0)
                        {
                            <li>No information available</li>
                        }
                        else
                        {
                            @foreach (var filmTitle in starship.filmTitles)
                            {
                                <li>@filmTitle</li>
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }
</div>

@code {
    string searchstring;
    HttpRequestMessage requestMessage;
    HttpResponseMessage responseMessage;
    List<Starship> starships;

    protected override async Task OnInitializedAsync()
    {
        starships = new List<Starship>();

            requestMessage = new HttpRequestMessage
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri("https://swapi.dev/api/starships/2")
                };

            responseMessage = await httpClient.SendAsync(requestMessage);

            if (responseMessage.IsSuccessStatusCode)
            {
                var responseString = await responseMessage.Content.ReadAsStringAsync();
                var starship = JsonSerializer.Deserialize<Starship>(responseString);

                // Obtener los nombres de las películas
                starship.filmTitles = new List<string>();
                foreach (var filmUrl in starship.films)
                {
                    var filmResponse = await httpClient.GetAsync(filmUrl);
                    if (filmResponse.IsSuccessStatusCode)
                    {
                        var filmResponseString = await filmResponse.Content.ReadAsStringAsync();
                        var film = JsonSerializer.Deserialize<Film>(filmResponseString);
                        starship.filmTitles.Add(film.title);
                    }
                }

                // Obtener los nombres de los pilotos
                starship.pilotNames = new List<string>();
                foreach (var pilotUrl in starship.pilots)
                {
                    var pilotResponse = await httpClient.GetAsync(pilotUrl);
                    if (pilotResponse.IsSuccessStatusCode)
                    {
                        var pilotResponseString = await pilotResponse.Content.ReadAsStringAsync();
                        var pilot = JsonSerializer.Deserialize<Pilot>(pilotResponseString);
                        starship.pilotNames.Add(pilot.name);
                    }
                }

                starships.Add(starship);
            }
    }

    public class Starship
    {
        public string name { get; set; }
        public string model { get; set; }
        public string manufacturer { get; set; }
        public string cost_in_credits { get; set; }
        public string length { get; set; }
        public string max_atmosphering_speed { get; set; }
        public string crew { get; set; }
        public string passengers { get; set; }
        public string cargo_capacity { get; set; }
        public string consumables { get; set; }
        public string hyperdrive_rating { get; set; }
        public string MGLT { get; set; }
        public string starship_class { get; set; }
        public List<string> films { get; set; }
        public List<string> pilots { get; set; }
        public List<string> filmTitles { get; set; }
        public List<string> pilotNames { get; set; }
    }

    public class Film
    {
        public string title { get; set; }
    }

    public class Pilot
    {
        public string name { get; set; }
    }
}
